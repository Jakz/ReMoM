;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: AC-7625-2E2D-92			    |
; |				 Valued	Client				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AABF5C934234A70885DEA7A0C8B3B5DE

; File Name   :	E:\MoM\IDA\IDA50sigs_20141030\MAGIC.EXE
; Format      :	MS-DOS executable (perhaps overlayed)
; Base Address:	1000h Range: 10000h-3C7E0h Loaded length: 2C7E0h
; Entry	Point :	1000:0
; Overlays: base=0002EFE0, size=0001B0B0, EXEinfo=00023D80
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

include	uni.inc	; see unicode subdir of	ida for	info on	unicode

.386
.model large

include	MAGIC_rprd2.inc



; Segment type:	Pure code
seg009 segment byte public 'CODE' use16
assume cs:seg009
;org 2
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing


; DOS -	OPEN DISK FILE WITH HANDLE (AX = 3D00h)
;   argFileName
; Return:
;   AX = file handle
; Attributes: bp-based frame

DOS_OpenFile proc far	; CODE XREF: LBX_Load_Entry+DDP
			; LBX_Load_Entry+124P
			; LBX_Load_s15453+D0P
			; LBX_Load_s15453+11AP
			; LBX_Load_HelpNewTerrCity+CDP
			; LBX_Load_HelpNewTerrCity+114P
			; LBX_Load_Entry_4bytes+BEP
			; LBX_Load_Entry_4bytes+105P
			; LBX_LoadFileMemory+14EP
			; sub_17BB8:loc_17C7EP

argFileName= word ptr  6

push	bp

loc_14E13:
mov	bp, sp
push	si

loc_14E16:
push	di
push	es

loc_14E18:
push	ds

loc_14E19:
mov	ax, 3D00h

loc_14E1C:
mov	dx, [bp+argFileName]
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
			; CF: Set if Error
			;
jb	short CF1_ErrorSet ; Jump if Below (CF=1)
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure

CF1_ErrorSet:		; CODE XREF: DOS_OpenFile+Fj
mov	ax, 0
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure
DOS_OpenFile endp



; DOS -	2+ - CLOSE A FILE WITH HANDLE
;   argFileHandle = BX = file handle
; Attributes: bp-based frame

DOS_CloseFileWithHandle	proc far
			; CODE XREF: LBX_Load_Entry+ACP
			; LBX_Load_s15453+9FP
			; LBX_Load_HelpNewTerrCity+9CP
			; LBX_Load_Entry_4bytes+8DP
			; LBX_LoadFileMemory:loc_167F3P
			; sub_17BB8:loc_17D0FP

argFileHandle= word ptr	 6

push	bp

loc_14E33:
mov	bp, sp
push	si

loc_14E36:
push	di
push	es

loc_14E38:
push	ds
mov	ah, 3Eh

loc_14E3B:
mov	bx, [bp+argFileHandle]
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle

loc_14E40:
pop	ds
pop	es
pop	di

loc_14E43:
pop	si
pop	bp
retf			; Return Far from Procedure
DOS_CloseFileWithHandle	endp



; Attributes: bp-based frame

; int __cdecl __far ST_DOS_fseek_BOF(int arg0_OffsetLow, int arg2_OffsetHigh, char *arg4_FileHandle)
ST_DOS_fseek_BOF proc far
			; CODE XREF: LBX_Load_Entry+169P
			; LBX_Load_Entry+231P
			; LBX_Load_s15453+161P
			; LBX_Load_s15453+229P
			; LBX_Load_s15453+2CEP
			; LBX_Load_HelpNewTerrCity+146P
			; LBX_Load_HelpNewTerrCity+20EP
			; LBX_Load_HelpNewTerrCity+2B6P
			; LBX_Load_Entry_4bytes+14AP
			; LBX_AllocMem+C8P
			; LBX_s16A80+11FP
			; LBX_MemAndRead+9EP

arg0_OffsetLow=	word ptr  6
arg2_OffsetHigh= word ptr  8
arg4_FileHandle= word ptr  0Ah

push	bp
mov	bp, sp
push	si
push	di
push	es
push	ds
mov	ax, 4200h	; AH = 42h, LSEEK - Set	Current	File Position
			; AL = 00h, Origin - Start of File
mov	bx, [bp+arg4_FileHandle]
mov	cx, [bp+arg2_OffsetHigh]
mov	dx, [bp+arg0_OffsetLow]
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
			; CX:DX	= (signed) offset, from	origin,	of new file position
			;
			;
			; Return:
			; CF clear if successful
			; DX:AX	= new file position in bytes from start	of file
			; CF set on error
			; AX = error code (01h,06h) (see #01680	at AH=59h/BX=0000h)
			;
jb	short SUCCESS	; JMP IF CF=1, i.e. IfError(LSEEK)

FAILURE:
mov	ax, 0FFFFh
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure

SUCCESS:		; CODE XREF: ST_DOS_fseek_BOF+15j
mov	ax, 0
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure
ST_DOS_fseek_BOF endp


loc_14E6F:
push	bp

loc_14E70:
mov	bp, sp
push	si
push	di

loc_14E74:
push	es

loc_14E75:
push	ds

loc_14E76:
mov	ax, 4202h

loc_14E79:
mov	bx, [bp+6]

loc_14E7C:
mov	cx, 0

loc_14E7F:
mov	dx, 0

loc_14E82:		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
int	21h		; AL = method: offset from end of file

loc_14E84:		; Jump if Below	(CF=1)
jb	short loc_14E8C
pop	ds
pop	es
pop	di
pop	si

loc_14E8A:
pop	bp
retf			; Return Far from Procedure

loc_14E8C:		; CODE XREF: seg009:loc_14E84j
mov	ax, 0

loc_14E8F:
mov	dx, 0
pop	ds
pop	es

loc_14E94:
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure


; DOS -	READ FROM FILE OR DEVICE (AH = 3Fh)
;   DX = argBuffer = Buffer = word_35B78
;   CX = argBytes = Bytes  = 512
;   BX = argFileHandle = Handle	= word_3C2DA
; Return:
;  -1 =	Success
;   0 =	Failure
; Attributes: bp-based frame

; int __cdecl __far ST_DOS_fread(int argBuffer,	int argBytes, int argFileHandle)
ST_DOS_fread proc far	; CODE XREF: LBX_Load_Entry+18EP
			; LBX_Load_Entry+3A0P
			; LBX_Load_Entry+3ECP
			; LBX_Load_s15453+186P
			; LBX_Load_s15453+452P
			; LBX_Load_s15453+49EP
			; LBX_Load_HelpNewTerrCity+16BP
			; LBX_Load_Entry_4bytes+16FP
			; LBX_LoadFileMemory+190P
			; LBX_LoadFileMemory+1DDP
			; LBX_AllocMem+182P
			; LBX_AllocMem+1D5P
			; LBX_s16A80+1D5P
			; LBX_s16A80+219P
			; sub_17BB8+103P
			; sub_17BB8+14EP
			; LBX_MemAndRead+126P
			; LBX_MemAndRead+165P

argBuffer= word	ptr  6
argBytes= word ptr  8
argFileHandle= word ptr	 0Ah

push	bp
mov	bp, sp
push	si
push	di
push	es
push	ds
mov	ah, 3Fh
mov	bx, [bp+argFileHandle]
mov	cx, [bp+argBytes]
mov	dx, [bp+argBuffer] ;
			; DS:DX	-> buffer
			; DS = DX = [BP+argBuffer]
			; DX = 0
mov	ds, dx
mov	dx, 0
int	21h		;
			; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle
			; CX = number of bytes to read
			; DS:DX	-> buffer for data
			; Return:
			;   CF clear if	successful
			;   AX = number	of bytes actually read
			;   CF set on error
			;   AX = error code
jb	short ReadError	; Jump if Below	(CF=1)
mov	ax, 0FFFFh
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure

ReadError:		; CODE XREF: ST_DOS_fread+19j
mov	ax, 0
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure
ST_DOS_fread endp



; Attributes: bp-based frame

; int __cdecl __far ST_DOS_ReadFromFileHandle_1(int argBuffer, int argByteCount, int argFileHandle)
ST_DOS_ReadFromFileHandle_1 proc far
			; CODE XREF: LBX_Load_s15453+252P
			; LBX_Load_s15453+266P
			; LBX_Load_HelpNewTerrCity+237P
			; LBX_Load_HelpNewTerrCity+24BP
			; LBX_Load_HelpNewTerrCity+30AP

argBuffer= word	ptr  6
argByteCount= word ptr	8
argFileHandle= word ptr	 0Ah

push	bp
mov	bp, sp
push	si
push	di
push	es
push	ds
mov	ah, 3Fh
mov	bx, [bp+argFileHandle]
mov	cx, [bp+argByteCount]
mov	dx, [bp+argBuffer]
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
jb	short loc_14EE4	; Jump if Below	(CF=1)

loc_14EDB:
mov	ax, -1
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure

loc_14EE4:		; CODE XREF: ST_DOS_ReadFromFileHandle_1+14j
mov	ax, 0
pop	ds
pop	es
pop	di
pop	si
pop	bp
retf			; Return Far from Procedure
ST_DOS_ReadFromFileHandle_1 endp



; Attributes: bp-based frame

idk_Get_FAT_FileExtension_s14EED proc far
			; CODE XREF: sub_1953F+10P
			; sub_1956B+10P
			; sub_19597+10P
			; sub_195C3+10P
			; sub_195EF+10P
			; sub_1961B+10P
			; sub_19E92+1EP
			; seg017:1318P
			; seg017:1830P
			; seg017:185EP
			; seg017:188CP
			; seg017:loc_1AADAP
			; ST_LoadSoundDrivers+5B0P
			; LBX_Cityname_s4B973+62P
			; LBX_Cityname_s4B973+D2P

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
push	si
push	di
push	es
push	ds
cmp	[bp+arg_2], 0	; Compare Two Operands
jnz	short loc_14EFF	; Jump if Not Zero (ZF=0)

loc_14EFA:
mov	ax, ds
mov	[bp+arg_2], ax

loc_14EFF:		; CODE XREF: idk_Get_FAT_FileExtension_s14EED+Bj
cmp	[bp+arg_6], 0	; Compare Two Operands
jnz	short loc_14F0A	; Jump if Not Zero (ZF=0)

loc_14F05:
mov	ax, ds
mov	[bp+arg_6], ax

loc_14F0A:		; CODE XREF: idk_Get_FAT_FileExtension_s14EED+16j
mov	ax, [bp+arg_2]

loc_14F0D:
mov	es, ax
mov	si, [bp+arg_4]

loc_14F12:
mov	di, [bp+arg_0]

loc_14F15:
mov	ax, [bp+arg_6]

loc_14F18:
mov	ds, ax

loc_14F1A:		; CODE XREF: idk_Get_FAT_FileExtension_s14EED:loc_14F1Ej
lodsb			; Load String
stosb			; Store	String

loc_14F1C:		; Compare Two Operands
cmp	al, 0

loc_14F1E:		; Jump if Not Zero (ZF=0)
jnz	short loc_14F1A

loc_14F20:
pop	ds
pop	es
pop	di
pop	si

loc_14F24:
pop	bp
retf			; Return Far from Procedure
idk_Get_FAT_FileExtension_s14EED endp

seg009 ends
