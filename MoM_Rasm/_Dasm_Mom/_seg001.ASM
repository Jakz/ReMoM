;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: AC-7625-2E2D-92			    |
; |				 Valued	Client				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AABF5C934234A70885DEA7A0C8B3B5DE


    Ideal
    include uni.inc ; see unicode subdir of ida	for info on unicode

    p386n
    model large

    include "__MAGIC.inc"



; Segment type:	Pure code
segment	seg001 byte public 'CODE' use16
    assume cs:seg001
    ;org 9
    assume es:nothing, ss:nothing, ds:dseg, fs:nothing,	gs:nothing


; Attributes: bp-based frame

proc _main far

varFileName= byte ptr -5Ch
varDestination=	byte ptr -3Eh
var_16=	word ptr -16h
var_14=	word ptr -14h
var_12=	word ptr -12h
var_10=	word ptr -10h
var_E= word ptr	-0Eh
var_C= word ptr	-0Ch
var_A= word ptr	-0Ah
var_8= word ptr	-8
var_Itr_SaveGam= word ptr -6
varFilePtrStream= word ptr -4
var_2= word ptr	-2
argc= word ptr	6
argv= dword ptr	 8
envp= dword ptr	 0Ch

    push bp
    mov	bp, sp
    sub	sp, 5Ch
    push si
    push di
    mov	[ST_HeapBase], offset _heapbase@
    lea	ax, [bp+varFileName]
    push ax
    mov	ax, offset strCONFIG_MOM
    push ax
    call ST_DosFindFile
    pop	cx
    pop	cx
    or	ax, ax
    jnz	short OPEN_READ_ConfigMom

MISSING_CONFIG_MOM:
    mov	ax, offset strRunInstall
    push ax
    call EXIT_CleanUp

loc_13233:
    pop	cx

OPEN_READ_ConfigMom:
    mov	ax, offset strRBr1
    push ax
    mov	ax, offset strCONFIG_MOM
    push ax
    call _fopen
    pop	cx
    pop	cx
    mov	[bp+varFilePtrStream], ax
    push [bp+varFilePtrStream]
    mov	ax, 1
    push ax
    mov	ax, 18
    push ax
    mov	ax, offset arrConfigMomSettings
    push ax
    call _fread
    add	sp, 8
    push [bp+varFilePtrStream]
    call _fclose
    pop	cx
    call j_ST_MagicSet_ReadCreateWrite
    mov	ax, [arrConfigMomSettings]
    mov	[bp+var_8], ax
    mov	ax, [arrConfigMomSettings+4]
    mov	[bp+var_A], ax
    mov	di, 0FFFFh
    mov	ax, [arrConfigMomSettings+2]

varCfgMom_02:
    mov	[bp+var_14], ax
    mov	cx, 12
    mov	bx, offset idk_enum_w1360A

loc_13286:
    mov	ax, [cs:bx]
    cmp	ax, [bp+var_14]
    jz	short loc_13295

loc_1328E:
    add	bx, 2
    loop loc_13286
    jmp	short loc_132DE

loc_13295:
    jmp	[word ptr cs:bx+18h]

loc_13299:
    xor	si, si

loc_1329B:
    mov	[bp+var_8], 0FFFFh

loc_132A0:
    mov	[bp+var_A], 0FFFFh

loc_132A5:
    mov	di, 0FFFFh
    jmp	short loc_132DE

loc_132AA:
    mov	si, 1
    jmp	short loc_1329B

loc_132AF:
    mov	si, 2
    jmp	short loc_1329B

loc_132B4:
    mov	si, 3
    jmp	short loc_132A0

loc_132B9:
    mov	si, 4
    jmp	short loc_132A0

loc_132BE:
    mov	si, 5
    jmp	short loc_132A0

loc_132C3:
    mov	si, 6
    jmp	short loc_1329B

loc_132C8:
    mov	si, 7
    jmp	short loc_1329B

loc_132CD:
    mov	si, 8
    jmp	short loc_1329B

loc_132D2:
    jmp	short $+2

loc_132D4:
    mov	si, 9
    jmp	short loc_132A5

loc_132D9:
    mov	si, 10
    jmp	short loc_132A5

loc_132DE:
    cmp	si, SNDRV_9_ROLAND
    jl	short loc_132FC

INIT_ROLAND_DRIVERS:
    mov	ax, offset strInitRoland
    push ax
    call DOS_PrintString
    pop	cx
    call f020105_bios_timeofday
    mov	ax, 2
    push ax
    call f020305_idk_SleepWaitPause
    pop	cx

loc_132FC:
    mov	ax, [arrConfigMomSettings+6]
    mov	[bp+var_E], ax
    mov	ax, [arrConfigMomSettings+0Ah]
    mov	[bp+var_10], ax
    mov	ax, [arrConfigMomSettings+0Ch]
    mov	[bp+var_12], ax
    mov	ax, [arrConfigMomSettings+8]
    mov	[bp+var_16], ax
    mov	cx, 12
    mov	bx, offset idk_enum_w135DA

loc_1331A:
    mov	ax, [cs:bx]
    cmp	ax, [bp+var_16]
    jz	short loc_13329
    add	bx, 2
    loop loc_1331A

loc_13327:
    jmp	short loc_13394

loc_13329:
    jmp	[word ptr cs:bx+18h]

loc_1332D:
    mov	[bp+var_C], 0

loc_13332:
    mov	[bp+var_E], 0FFFFh
    mov	[bp+var_10], 0FFFFh
    mov	[bp+var_12], 0FFFFh
    jmp	short loc_13394

loc_13343:
    mov	[bp+var_C], 1
    jmp	short loc_13332

loc_1334A:
    jmp	short loc_1332D

loc_1334C:
    mov	[bp+var_C], 3
    jmp	short loc_13394

loc_13353:
    mov	[bp+var_C], 4
    jmp	short loc_13394

loc_1335A:
    mov	[bp+var_C], 5
    mov	ax, [bp+var_10]
    mov	[bp+var_A], ax
    mov	di, [bp+var_12]
    jmp	short loc_13394

loc_1336A:
    mov	[bp+var_C], 6
    jmp	short loc_13376

loc_13371:
    mov	[bp+var_C], 7

loc_13376:
    mov	[bp+var_E], 0FFFFh
    jmp	short loc_13394

loc_1337D:
    mov	[bp+var_C], 8
    jmp	short loc_13394

loc_13384:
    jmp	short $+2

loc_13386:
    mov	[bp+var_C], 9
    jmp	short loc_13332

loc_1338D:
    mov	[bp+var_C], 0Ah
    jmp	short loc_13332

loc_13394:
    cmp	si, 2
    jnz	short loc_1339E
    mov	[bp+var_C], 2

loc_1339E:
    cmp	[LBX_FONTS_w3A508], 2
    jg	short loc_133AC
    cmp	[LBX_FONTS_w3A508], 0
    jge	short loc_133B2

loc_133AC:
    mov	[LBX_FONTS_w3A508], 0

loc_133B2:
    mov	[LBX_FONTS_w3A50A], 1
    mov	[bp+var_Itr_SaveGam], 1
    jmp	LOOP_x9_SaveGam

loc_133C0:
    mov	bx, [bp+var_Itr_SaveGam]
    shl	bx, 1
    cmp	[MagSet_22+bx],	0
    jnz	short SAVEGAM
    jmp	ITR_SaveGam

SAVEGAM:
    mov	ax, 10
    push ax
    lea	ax, [bp+varFileName]
    push ax
    push [bp+var_Itr_SaveGam]
    call _itoa
    add	sp, 6
    mov	ax, offset strSAVE
    push ax
    lea	ax, [bp+varDestination]
    push ax
    call _strcpy
    pop	cx
    pop	cx
    lea	ax, [bp+varFileName]
    push ax
    lea	ax, [bp+varDestination]
    push ax
    call _strcat
    pop	cx
    pop	cx
    mov	ax, offset strGAM
    push ax
    lea	ax, [bp+varDestination]
    push ax
    call _strcat
    pop	cx
    pop	cx
    lea	ax, [bp+varFileName]
    push ax
    lea	ax, [bp+varDestination]
    push ax
    call ST_DosFindFile
    pop	cx
    pop	cx
    cmp	[bp+varFileName], 0
    jnz	short ITR_SaveGam
    mov	bx, [bp+var_Itr_SaveGam]
    shl	bx, 1
    mov	[MagSet_22+bx],	0
    mov	ax, 8311
    push ax
    mov	ax, [bp+var_Itr_SaveGam]
    mov	dx, 20
    imul dx
    add	ax, offset MagSet_23
    push ax
    call _strcpy
    pop	cx
    pop	cx
    mov	ax, offset strWBr1
    push ax
    mov	ax, offset strMAGIC_SETr1
    push ax
    call _fopen
    pop	cx
    pop	cx
    mov	[bp+varFilePtrStream], ax
    push [bp+varFilePtrStream]
    mov	ax, 1
    push ax
    mov	ax, 466
    push ax
    mov	ax, offset MagSet_01
    push ax
    call _fwrite
    add	sp, 8
    push [bp+varFilePtrStream]
    call _fclose
    pop	cx

ITR_SaveGam:
    inc	[bp+var_Itr_SaveGam]

LOOP_x9_SaveGam:
    cmp	[bp+var_Itr_SaveGam], 9
    jge	short loc_13484
    jmp	loc_133C0

loc_13484:
    mov	ax, 2700
    push ax
    call setRequiredEMS
    pop	cx
    mov	ax, 583
    push ax
    call ST_SetRequiredMEM
    pop	cx
    mov	[LBX_FONTS_w3A50A], 1
    mov	[LBX_FONTS_w3A508], 2
    push [bp+var_12]
    push [bp+var_10]
    push [bp+var_E]
    push [bp+var_C]
    push di
    push [bp+var_A]
    push [bp+var_8]
    push si
    mov	ax, offset strFONTSLBXr1
    push ax
    push [LBX_FONTS_w3A508]
    push [LBX_FONTS_w3A50A]
    call Load_Fonts_SndDrv
    add	sp, 16h
    call ST_SetDebugModeTrue
    mov	ax, offset unk_334E4
    push ax
    call j_idk_Ems_TileFigureCont_s553B0
    pop	cx
    call SetFlag_1_CfgMom_w36A54
    mov	ax, -1
    push ax
    xor	ax, ax
    push ax
    call ILSe_prepare_palette
    pop	cx
    pop	cx
    call idk_SetPalette_s1C4F4
    mov	bx, [word ptr bp+argv]
    mov	bx, [bx+2]
    cmp	[byte ptr bx], 74
    jnz	short loc_13530

loc_134FE:
    mov	bx, [word ptr bp+argv]
    mov	bx, [bx+2]
    cmp	[byte ptr bx+1], 69
    jnz	short loc_13530

loc_1350A:
    mov	bx, [word ptr bp+argv]
    mov	bx, [bx+2]
    cmp	[byte ptr bx+2], 78
    jnz	short loc_13530
    mov	bx, [word ptr bp+argv]
    mov	bx, [bx+2]
    cmp	[byte ptr bx+3], 'N'
    jnz	short loc_13530
    mov	bx, [word ptr bp+argv]
    mov	bx, [bx+2]
    cmp	[byte ptr bx+4], 'Y'
    jnz	short loc_13530
    jmp	short loc_13535

loc_13530:
    call j_ST_LoadMusicSoundfxIntro

loc_13535:
    nop
    push cs
    call near ptr ILSe_load_vortex_animation_images
    nop
    push cs
    call near ptr fncLoadTERRSTAT
    nop
    push cs
    call near ptr LBX_SpellDat
    call sub_31CD5
    xor	ax, ax
    push ax
    mov	ax, 199
    push ax
    mov	ax, 319
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call idk_VGA_ScData_s186BC
    add	sp, 10
    call idk_VGA_s1E4BA
    xor	ax, ax
    push ax
    mov	ax, 199
    push ax
    mov	ax, 319
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call idk_VGA_ScData_s186BC
    add	sp, 10
    call VGA_MathThenSetVarToVgaLoc
    call AIL_someSequence
    mov	ax, 104
    push ax
    mov	ax, offset strMUSIC
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[bp+var_2], ax
    cmp	[MagSet_02], 1
    jnz	short KICK_OFF
    push [bp+var_2]
    call ST_LoadSound
    pop	cx

KICK_OFF:
    mov	ax, -1
    push ax
    xor	ax, ax
    push ax
    call ILSe_prepare_palette
    pop	cx
    pop	cx
    call idk_SetPalette_s1C4F4
    nop
    push cs
    call near ptr ILSe_RUN
    mov	ax, 8
    push ax
    call j_OVR_SaveGame_MagicSet
    pop	cx
    call ST_ExitWithMemDiag
    pop	di
    pop	si
    mov	sp, bp
    pop	bp
    retf
endp _main ; sp-analysis failed

    align 2
idk_enum_w135DA	dw	0,     1,   10h,   12h
    dw	  18h,	 19h,	20h,   21h
    dw	  22h,	 30h,	31h,   38h
    dw offset loc_1332D
    dw offset loc_13343
    dw offset loc_1334A
    dw offset loc_1334C
    dw offset loc_13353
    dw offset loc_1336A
    dw offset loc_1335A
    dw offset loc_13371
    dw offset loc_1337D
    dw offset loc_13384
    dw offset loc_13386
    dw offset loc_1338D
idk_enum_w1360A	dw	0,     1,   10h,   12h
    dw	  18h,	 19h,	20h,   21h
    dw	  22h,	 30h,	31h,   38h
    dw offset loc_13299
    dw offset loc_132AA
    dw offset loc_132AF
    dw offset loc_132B4
    dw offset loc_132B9
    dw offset loc_132C3
    dw offset loc_132BE
    dw offset loc_132C8
    dw offset loc_132CD
    dw offset loc_132D2
    dw offset loc_132D4
    dw offset loc_132D9


; Attributes: library function bp-based	frame

proc @filebuf@terminate$qv far
    push bp
    mov	bp, sp
    pop	bp
    retf
endp @filebuf@terminate$qv



; Attributes: bp-based frame

proc ILSe_RUN far

varConfigMomArray= byte	ptr -20h
var_2= word ptr	-2

    push bp
    mov	bp, sp
    sub	sp, 20h
    push si
    push di
    lea	ax, [bp+varConfigMomArray]
    push ax
    mov	ax, offset strCONFIG_MOM
    push ax
    call ST_DosFindFile
    pop	cx
    pop	cx
    or	ax, ax
    jnz	short ConfigMomFound

ConfigMomMissing:
    mov	ax, offset strRunInstall
    push ax
    call EXIT_CleanUp
    pop	cx

ConfigMomFound:
    mov	ax, offset strRBr1
    push ax
    mov	ax, offset strCONFIG_MOM
    push ax

loc_1366C:
    call _fopen
    pop	cx
    pop	cx
    mov	si, ax
    push si
    mov	ax, 1
    push ax
    mov	ax, 18
    push ax
    mov	ax, offset arrConfigMomSettings
    push ax
    call _fread
    add	sp, 8
    push si
    call _fclose
    pop	cx
    xor	di, di
    mov	[idk_CfgMom_w381BE], 1
    mov	[idk_CfgMom_w3700C], 0FFFFh
    call SetFlag_1_CfgMom_w36A54
    jmp	short loc_1370C

loc_136A6:
    xor	ax, ax
    push ax
    call idk_SetConfigMomFlagValue_s1930B
    pop	cx
    call idk_SetThreeFlags_s25E89
    nop
    push cs
    call near ptr ILSe_MAINMENU_screen
    mov	[bp+var_2], ax
    call idk_SetThreeFlags_s25E89
    mov	[idk_CfgMom_w381BE], 0
    mov	bx, [bp+var_2]
    cmp	bx, 4
    ja	short loc_1370C
    shl	bx, 1
    jmp	[cs:off_13720+bx]

loc_136D6:
    call AIL_someSequence
    mov	ax, 8
    push ax
    call sub_318CA
    db	59h

loc_136E5:
    mov	[word_3461A], 0FFFFh
    jmp	short loc_1370C

loc_136ED:
    call sub_318D4
    jmp	short loc_1370C

loc_136F4:
    call sub_3189D
    jmp	short loc_136E5

loc_136FB:
    mov	di, 1
    jmp	short loc_136E5

loc_13700:
    call sub_31D05
    call sub_31CD5
    jmp	short $+2

loc_1370C:
    or	di, di
    jz	short loc_136A6

ThankYouExit:
    mov	ax, offset strThankYou
    push ax
    call EXIT_CleanUp
    pop	cx
    pop	di
    pop	si
    mov	sp, bp
    pop	bp
    retf
endp ILSe_RUN

off_13720 dw offset loc_136D6
    dw offset loc_136ED
    dw offset loc_136F4
    dw offset loc_136FB
    dw offset loc_13700


; Attributes: bp-based frame

proc ILSe_load_vortex_animation_images far
    push bp
    mov	bp, sp
    push si
    mov	ax, offset strMAINSCRN
    push ax
    call LBX_LoadFileIndex1
    pop	cx
    xor	ax, ax
    push ax
    mov	ax, offset strMAINSCRN
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_36FF8], ax
    mov	ax, 1
    push ax
    mov	ax, offset strVORTEX
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_37000], ax
    mov	ax, 2
    push ax
    mov	ax, offset strVORTEX
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_36FCE], ax
    mov	ax, 5
    push ax
    mov	ax, offset strVORTEX
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_36FD2], ax
    mov	ax, 4
    push ax
    mov	ax, offset strVORTEX
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_36FFC], ax
    mov	ax, 3
    push ax
    mov	ax, offset strVORTEX
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_36FCA], ax
    mov	ax, 5
    push ax
    mov	ax, offset strMAINSCRN
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	[word_37004], ax
    mov	ax, offset strWIZARDS
    push ax
    call LBX_LoadFileIndex1
    pop	cx
    xor	si, si
    jmp	short LOOP_WIZARDS

LOOP_x14:
    push si
    mov	ax, offset strWIZARDS
    push ax
    call LBX_Load_Entry_0_0_0
    pop	cx
    pop	cx
    mov	bx, si
    shl	bx, 1
    mov	[bx+52C6h], ax
    inc	si

LOOP_WIZARDS:
    cmp	si, 14
    jl	short LOOP_x14
    mov	ax, offset strSPELLDAT
    push ax
    call LBX_LoadFileIndex1
    pop	cx
    pop	si
    pop	bp
    retf
endp ILSe_load_vortex_animation_images



; Attributes: bp-based frame

proc ILSe_MAINMENU_screen far

var_6C=	word ptr -6Ch
argPtrCharArr= byte ptr	-4Eh
argCharPtrFileName= byte ptr -30h
var_12=	word ptr -12h
var_10=	word ptr -10h
var_E= word ptr	-0Eh
var_C= word ptr	-0Ch
var_A= word ptr	-0Ah
var_8= word ptr	-8
var_6= word ptr	-6
var_4= word ptr	-4
argNumber= word	ptr -2

    push bp
    mov	bp, sp
    sub	sp, 6Ch
    push si
    push di
    db 83h,3Eh,0FCh,52h,0FFh ; <BAD>cmp	[idk_CfgMom_w3700C], 0FFFFh
    jz	short loc_1380B
    mov	ax, [idk_CfgMom_w3700C]
    mov	[bp+argNumber],	ax
    mov	[idk_CfgMom_w3700C], 0FFFFh
    mov	ax, [bp+argNumber]

loc_13808:
    jmp	loc_13CB4

loc_1380B:
    mov	[word_3461A], 0FFFFh
    mov	[bp+var_C], 0
    mov	[word_37002], 0
    mov	[word_36FD4], 0FFFFh
    mov	[word_36FF4], 0
    mov	[word_33D7C], 0
    xor	di, di
    mov	[idk_CfgMom_w381BE], 1
    cmp	[idk_CfgMom_w381BE], 0
    jz	short loc_13842

loc_1383D:
    call sub_318CF

loc_13842:
    xor	ax, ax
    push ax
    mov	ax, 199
    push ax
    mov	ax, 319
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call idk_VGA_ScData_s186BC
    add	sp, 0Ah
    call idk_VGA_s1E4BA
    xor	ax, ax
    push ax
    mov	ax, 199
    push ax
    mov	ax, 319
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call idk_VGA_ScData_s186BC
    add	sp, 0Ah
    call VGA_MathThenSetVarToVgaLoc
    mov	ax, -1
    push ax
    mov	ax, 2
    push ax
    call ILSe_prepare_palette
    pop	cx
    pop	cx
    call j_ST_MagicSet_ReadCreateWrite
    mov	[word_3A2C0], 0FFFFh
    mov	[word_3A2CA], 0FFFFh
    mov	[word_3A2D4], 0FFFFh
    mov	[word_3A2DE], 0FFFFh
    mov	[word_3A2E8], 0FFFFh
    mov	[word_3700E], 0
    mov	[bp+argNumber],	1
    jmp	loc_13942

SAVE_GAM:
    mov	ax, offset strSAVE
    push ax
    lea	ax, [bp+argCharPtrFileName]
    push ax
    call _strcpy
    pop	cx
    pop	cx
    mov	ax, 10
    push ax
    lea	ax, [bp+argPtrCharArr]
    push ax
    push [bp+argNumber]
    call _itoa
    add	sp, 6
    lea	ax, [bp+argPtrCharArr]
    push ax
    lea	ax, [bp+argCharPtrFileName]
    push ax
    call _strcat
    pop	cx
    pop	cx
    mov	ax, offset strGAM
    push ax
    lea	ax, [bp+argCharPtrFileName]
    push ax
    call _strcat
    pop	cx
    pop	cx
    lea	ax, [bp+var_6C]
    push ax
    lea	ax, [bp+argCharPtrFileName]
    push ax
    call ST_DosFindFile
    pop	cx
    pop	cx
    or	ax, ax
    jz	short loc_13933
    cmp	[bp+argNumber],	9
    jge	short loc_1392B
    mov	bx, [word_3700E]
    shl	bx, 1
    mov	ax, [bp+argNumber]
    dec	ax
    mov	[word_37010+bx], ax

loc_13925:
    inc	[word_3700E]
    jmp	short loc_13931

loc_1392B:
    mov	[word_37002], 1

loc_13931:
    jmp	short loc_1393F

loc_13933:
    mov	bx, [word_3700E]
    shl	bx, 1
    mov	[word_37010+bx], 0FFFFh

loc_1393F:
    inc	[bp+argNumber]

loc_13942:
    cmp	[bp+argNumber],	10
    jge	short loc_1394B
    jmp	SAVE_GAM

loc_1394B:
    cmp	[word_3700E], 0
    jle	short loc_13958
    mov	[word_36FF4], 1

loc_13958:
    call setFlagsMaybeMouseEGA
    mov	[bp+var_4], 0
    cmp	[word_36FF4], 0
    jz	short loc_139AC
    mov	ax, 0FFFFh
    push ax
    mov	ax, 2077h
    push ax
    mov	ax, 0A1h
    push ax
    mov	ax, 0D3h
    push ax
    mov	ax, 96h
    push ax
    mov	ax, 6Ch
    push ax
    call idk_Mouse_s29A0B
    add	sp, 0Ch
    mov	[word_36FC6], ax
    mov	[word_3A2C0], 275h
    mov	[word_3A2C2], 6Ch
    mov	[word_3A2C4], 94h
    mov	[word_3A2C6], 0D3h
    mov	[word_3A2C8], 0A2h
    jmp	short loc_139B7

loc_139AC:
    mov	[word_36FC6], 0FC18h
    mov	[bp+var_4], 1

loc_139B7:
    cmp	[word_37002], 0
    jz	short loc_13A21
    mov	ax, 0FFFFh
    push ax
    mov	ax, 2077h
    push ax
    mov	ax, [bp+var_4]
    mov	dx, 0Ch
    imul dx

loc_139CE:
    add	ax, 95h
    push ax
    mov	ax, 0D3h
    push ax
    mov	ax, [bp+var_4]
    mov	dx, 0Ch
    imul dx
    add	ax, 8Ah
    push ax
    mov	ax, 6Ch
    push ax
    call idk_Mouse_s29A0B

loc_139EB:
    add	sp, 0Ch
    mov	[word_36FFE], ax
    mov	[word_3A2CA], 274h
    mov	[word_3A2CC], 6Ch
    mov	ax, [bp+var_4]

loc_13A00:
    mov	dx, 0Ch
    imul dx
    add	ax, 8Ah
    mov	[word_3A2CE], ax
    mov	[word_3A2D0], 0D3h
    mov	ax, [bp+var_4]
    mov	dx, 0Ch
    imul dx
    add	ax, 95h
    mov	[word_3A2D2], ax
    jmp	short loc_13A27

loc_13A21:
    mov	[word_36FFE], 0FC18h

loc_13A27:
    mov	ax, 0FFFFh
    push ax
    mov	ax, 2077h
    push ax
    mov	ax, 0ADh
    push ax
    mov	ax, 0D3h
    push ax
    mov	ax, 0A2h
    push ax
    mov	ax, 6Ch
    push ax
    call idk_Mouse_s29A0B
    add	sp, 0Ch
    mov	[word_36FFA], ax
    mov	[word_3A2D4], 276h
    mov	[word_3A2D6], 6Ch
    mov	[word_3A2D8], 0A2h
    mov	[word_3A2DA], 0D3h
    mov	[word_3A2DC], 0ADh
    mov	ax, 0FFFFh
    push ax
    mov	ax, 2077h
    push ax
    mov	ax, 0B9h
    push ax
    mov	ax, 0D3h
    push ax
    mov	ax, 0AEh
    push ax
    mov	ax, 6Ch
    push ax
    call idk_Mouse_s29A0B
    add	sp, 0Ch
    mov	[word_36FCC], ax
    mov	[word_3A2DE], 31Eh
    mov	[word_3A2E0], 6Ch
    mov	[word_3A2E2], 0AEh
    mov	[word_3A2E4], 0D3h
    mov	[word_3A2E6], 0B9h
    mov	ax, 0FFFFh
    push ax
    mov	ax, 2077h
    push ax
    mov	ax, 0C7h
    push ax
    mov	ax, 0D3h
    push ax
    mov	ax, 0BAh
    push ax
    mov	ax, 6Ch
    push ax
    call idk_Mouse_s29A0B
    add	sp, 0Ch
    mov	[word_36FD0], ax
    mov	[word_3A2E8], 277h
    mov	[word_3A2EA], 6Ch
    mov	[word_3A2EC], 0BAh
    mov	[word_3A2EE], 0D3h
    mov	[word_3A2F0], 0C7h
    cmp	[word_37002], 0
    jz	short loc_13B05
    mov	ax, 0FFFFh
    push ax
    mov	ax, offset strC
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx

loc_13B00:
    mov	[bp+var_6], ax
    jmp	short loc_13B0A

loc_13B05:
    mov	[bp+var_6], 0FC18h

loc_13B0A:
    cmp	[word_36FF4], 0
    jz	short loc_13B25
    mov	ax, 0FFFFh
    push ax
    mov	ax, offset strL
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx
    mov	[bp+var_12], ax
    jmp	short loc_13B2A

loc_13B25:
    mov	[bp+var_12], 0FC18h

loc_13B2A:
    mov	ax, 0FFFFh
    push ax
    mov	ax, (offset strMAINSCRN+7)
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx
    mov	[bp+var_8], ax
    mov	ax, 0FFFFh
    push ax
    mov	ax, offset strH
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx
    mov	[bp+var_10], ax
    mov	ax, 0FFFFh
    push ax
    mov	ax, offset strQ
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx
    mov	[bp+var_A], ax
    mov	ax, 0FFFFh
    push ax
    mov	ax, offset strESC
    push ax
    call idk_Mouse_s29C99
    pop	cx
    pop	cx
    mov	[bp+var_E], ax
    mov	ax, offset unk_33D6E
    push ax
    mov	ax, 1
    push ax
    call wtf_s23F3E
    pop	cx
    pop	cx
    call get__Mouse_w360A6
    push ax
    call get__Mouse_w360A4
    push ax
    call sub_24648
    pop	cx
    pop	cx
    push [word_36FFA]
    call sub_27913
    pop	cx
    push [word_36FF8]
    call sub_1FAD4
    pop	cx
    mov	[word_36FD4], 0FFFFh
    mov	ax, 2
    push ax
    mov	ax, seg	seg001
    push ax
    mov	ax, offset ILSe_draw_mainmenu_screen
    push ax
    call sub_2E1FB
    add	sp, 6
    mov	ax, 5
    push ax
    mov	ax, offset word_3A2C0
    push ax
    call idk_SetThreeFlagsOrValues_s25E72
    pop	cx
    pop	cx
    mov	ax, 4
    push ax
    call sub_2B9C4
    pop	cx
    jmp	loc_13C9D

loc_13BDE:
    call f020105_bios_timeofday
    call sub_2B97A
    mov	si, ax
    or	si, si
    jz	short loc_13BF1
    mov	di, 1

loc_13BF1:
    cmp	si, [bp+var_6]
    jz	short loc_13BFC
    cmp	si, [word_36FFE]
    jnz	short loc_13C05

loc_13BFC:
    mov	di, 1
    mov	[word_36FD4], 0

loc_13C05:
    cmp	si, [bp+var_12]
    jz	short loc_13C10
    cmp	si, [word_36FC6]
    jnz	short loc_13C19

loc_13C10:
    mov	di, 1
    mov	[word_36FD4], 1

loc_13C19:
    cmp	si, [bp+var_8]
    jz	short loc_13C24
    cmp	si, [word_36FFA]
    jnz	short loc_13C2D

loc_13C24:
    mov	di, 1
    mov	[word_36FD4], 2

loc_13C2D:
    cmp	si, [bp+var_A]
    jz	short loc_13C3D
    cmp	si, [word_36FD0]
    jz	short loc_13C3D
    cmp	si, [bp+var_E]
    jnz	short loc_13C46

loc_13C3D:
    mov	di, 1
    mov	[word_36FD4], 3

loc_13C46:
    cmp	si, [bp+var_10]
    jz	short loc_13C51
    cmp	si, [word_36FCC]
    jnz	short loc_13C5A

loc_13C51:
    mov	di, 1
    mov	[word_36FD4], 4

loc_13C5A:
    db 83h,3Eh,0C4h,52h,0FFh ; <BAD>cmp	[word_36FD4], 0FFFFh
    jnz	short loc_13C63
    xor	di, di

loc_13C63:
    or	di, di
    jnz	short loc_13C9D
    nop
    push cs
    call near ptr ILSe_draw_mainmenu_screen
    call sub_2E303
    cmp	[idk_CfgMom_w381BE], 0
    jz	short loc_13C93
    cmp	[bp+var_C], 0
    jnz	short loc_13C93
    call sub_318DE
    call sub_1E525

loc_13C88:
    mov	[bp+var_C], 1
    mov	[idk_CfgMom_w381BE], 0

loc_13C93:
    mov	ax, 2
    push ax
    call f020305_idk_SleepWaitPause
    pop	cx

loc_13C9D:
    or	di, di
    jnz	short loc_13CA4
    jmp	loc_13BDE

loc_13CA4:
    call sub_2E257
    call idk_SetThreeFlags_s25E89
    mov	ax, [word_36FD4]
    jmp	loc_13808

loc_13CB4:
    pop	di
    pop	si
    mov	sp, bp
    pop	bp
    retf
endp ILSe_MAINMENU_screen



; Attributes: bp-based frame

proc ILSe_draw_mainmenu_screen far

var_8= word ptr	-8
var_6= word ptr	-6
var_4= word ptr	-4
var_2= word ptr	-2

    push bp
    mov	bp, sp
    sub	sp, 8
    push si
    push di

loc_13CC2:
    mov	si, 7Bh
    mov	di, 8Dh

loc_13CC8:
    call sub_27AFB
    mov	[bp+var_2], ax

loc_13CD0:
    call VGA_MathThenSetVarToVgaLoc
    xor	ax, ax
    push ax
    mov	ax, 0C7h
    push ax
    mov	ax, 13Fh
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call idk_VGA_ScData_s186BC
    add	sp, 0Ah
    push [word_36FF8]
    call sub_1FAEB
    pop	cx
    mov	[bp+var_8], ax
    xor	ax, ax

loc_13CFD:
    push ax

loc_13CFE:
    push [word_36FF8]

loc_13D02:
    call sub_1FA6E
    pop	cx
    pop	cx
    mov	[bp+var_6], 0

loc_13D0E:
    jmp	short loc_13D25

loc_13D10:
    push [word_36FF8]
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    call sub_1F655
    add	sp, 6

loc_13D22:
    inc	[bp+var_6]

loc_13D25:
    mov	ax, [bp+var_6]
    cmp	ax, [bp+var_8]
    jle	short loc_13D10
    push [word_37004]
    mov	ax, 29h
    push ax
    xor	ax, ax
    push ax
    call sub_1F655
    add	sp, 6
    cmp	[idk_CfgMom_w381BE], 0
    jnz	short loc_13D4C
    call sub_31CD0

loc_13D4C:
    mov	[bp+var_4], 0
    cmp	[word_36FF4], 0
    jz	short loc_13D91
    mov	ax, [bp+var_2]
    cmp	ax, [word_36FC6]
    jnz	short loc_13D6D
    push [word_36FD2]
    call sub_1FAD4
    pop	cx
    jmp	short loc_13D7C

loc_13D6D:
    mov	ax, 1
    push ax
    push [word_36FD2]
    call sub_1FA6E
    pop	cx

loc_13D7B:
    pop	cx

loc_13D7C:
    push [word_36FD2]
    mov	ax, di
    add	ax, 0Ch
    push ax
    push si
    call sub_1F655
    add	sp, 6
    jmp	short loc_13D96

loc_13D91:
    mov	[bp+var_4], 1

loc_13D96:
    cmp	[word_37002], 0
    jz	short loc_13DDB
    mov	ax, [bp+var_2]

loc_13DA0:
    cmp	ax, [word_36FFE]
    jnz	short loc_13DB2
    push [word_37000]
    call sub_1FAD4
    pop	cx
    jmp	short loc_13DC1

loc_13DB2:
    mov	ax, 1
    push ax
    push [word_37000]

loc_13DBA:
    call sub_1FA6E
    pop	cx
    pop	cx

loc_13DC1:
    push [word_37000]
    mov	ax, [bp+var_4]
    mov	dx, 0Ch
    imul dx

loc_13DCD:
    mov	dx, di
    add	dx, ax
    push dx
    push si
    call sub_1F655
    add	sp, 6

loc_13DDB:
    mov	ax, [bp+var_2]
    cmp	ax, [word_36FFA]
    jnz	short loc_13DF0
    push [word_36FFC]
    call sub_1FAD4
    pop	cx
    jmp	short loc_13DFF

loc_13DF0:
    mov	ax, 1
    push ax
    push [word_36FFC]
    call sub_1FA6E
    pop	cx
    pop	cx

loc_13DFF:
    push [word_36FFC]
    mov	ax, di
    add	ax, 18h
    push ax
    push si
    call sub_1F655
    add	sp, 6
    mov	ax, [bp+var_2]
    cmp	ax, [word_36FCC]
    jnz	short loc_13E27
    push [word_36FCE]
    call sub_1FAD4
    pop	cx
    jmp	short loc_13E36

loc_13E27:
    mov	ax, 1
    push ax
    push [word_36FCE]
    call sub_1FA6E
    pop	cx

loc_13E35:
    pop	cx

loc_13E36:
    push [word_36FCE]
    mov	ax, di
    add	ax, 24h
    push ax
    push si
    call sub_1F655
    add	sp, 6
    mov	ax, [bp+var_2]
    cmp	ax, [word_36FD0]
    jnz	short loc_13E5E
    push [word_36FCA]
    call sub_1FAD4
    pop	cx
    jmp	short loc_13E6D

loc_13E5E:
    mov	ax, 1
    push ax
    push [word_36FCA]
    call sub_1FA6E
    pop	cx

loc_13E6C:
    pop	cx

loc_13E6D:
    push [word_36FCA]
    mov	ax, di
    add	ax, 30h
    push ax
    push si
    call sub_1F655
    add	sp, 6
    mov	ax, [word_33D7C]
    inc	ax
    mov	bx, 14h
    cwd
    idiv bx
    mov	[word_33D7C], dx
    pop	di
    pop	si
    mov	sp, bp
    pop	bp
    retf
endp ILSe_draw_mainmenu_screen



; Attributes: bp-based frame

proc fncLoadTERRSTAT far
    push bp
    mov	bp, sp
    mov	ax, 6
    push ax
    mov	ax, 770
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    mov	ax, offset strTERRSTAT

loc_13EA8:
    push ax
    call LBX_PreLoad_s15453
    add	sp, 0Ah
    push ax
    call idk_DxAxBpSp_s14BFC
    pop	cx
    mov	[word ptr dword_378BC+2], dx
    mov	[word ptr dword_378BC],	ax
    pop	bp
    retf
endp fncLoadTERRSTAT



; Attributes: bp-based frame

proc LBX_SpellDat far
    push bp
    mov	bp, sp
    mov	ax, 36
    push ax
    mov	ax, 215
    push ax
    xor	ax, ax
    push ax
    xor	ax, ax
    push ax
    mov	ax, offset strSPELLDAT
    push ax
    call LBX_PreLoad_s15453

loc_13EDB:
    add	sp, 10
    push ax

loc_13EDF:
    call idk_DxAxBpSp_s14BFC
    pop	cx
    mov	[word ptr dword_3833C+2], dx
    mov	[word ptr dword_3833C],	ax
    pop	bp
    retf
endp LBX_SpellDat



; Attributes: bp-based frame

proc LBX_HelpEntry_s13EEE far
    push bp
    mov	bp, sp
    mov	ax, 0Ah
    push ax
    mov	ax, 4
    push ax
    xor	ax, ax
    push ax
    mov	ax, offset word_3A2C0
    push ax
    mov	ax, 19h
    push ax

loc_13F04:
    mov	ax, offset strHLPENTRY
    push ax
    call LBX_Load_HelpNewTerrCity

loc_13F0D:
    add	sp, 0Ch
    mov	ax, 4
    push ax

loc_13F14:
    mov	ax, offset word_3A2C0
    push ax

loc_13F18:
    call idk_SetThreeFlagsOrValues_s25E72
    pop	cx

loc_13F1E:
    pop	cx
    pop	bp

locret_13F20:
    retf
endp LBX_HelpEntry_s13EEE ; sp-analysis	failed

ends seg001
